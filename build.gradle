plugins {
    id 'java'
    id 'maven-publish'
    id 'com.palantir.git-version' version '0.12.3'
}

// ext makes method callable project wide
ext.getMyVersion = { ->
    def details = versionDetails()
    String version = details.lastTag + "." + details.commitDistance
    if (details.branchName != "release") {
        version = version + "-SNAPSHOT"
    }
    return version
}

apply plugin: "com.palantir.git-version"

group 'by.jrr'
version getMyVersion()

sourceCompatibility = 1.11

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'org.projectlombok:lombok:1.18.16'
}

task showVersion {
    doLast {
        println "\nCurrent getMyVersion: ${getMyVersion()}\n"
        println "\nCurrent palantir version: ${gitVersion()}\n"

        def details = versionDetails()
        println "last tag          : ${details.lastTag}"
        println "commit distance   : ${details.commitDistance}"
        println "hash              : ${details.gitHash}"
        println "branch name       : ${details.branchName}"
        println "is clean tag      : ${details.isCleanTag}"
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/max-java/moodle_model")
            credentials {
                Properties props = new Properties()
                def propFile = file('./git.properties')
                if (propFile.canRead()) {
                    props.load(new FileInputStream(propFile))

                    if (props != null
                            && props.containsKey('username')
                            && props.containsKey('password')) {

                        username = props['username']
                        password = props['password']
                    }
                }
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

